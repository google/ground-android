/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.android.build.gradle.api.BaseVariant

apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'net.ltgt.errorprone'

apply from: '../config/checkstyle/checkstyle.gradle'
apply from: '../config/lint/lint.gradle'
apply from: '../config/pmd/pmd.gradle'
apply from: '../config/spotbugs/spotbugs.gradle'
apply from: '../config/jacoco/jacoco.gradle'

project.ext {
    autoDisposeVersion = "1.4.0"
    autoValueVersion = "1.7.4"
    hiltJetpackVersion = "1.0.0"
    lifecycleVersion = "2.2.0"
    roomVersion = "2.3.0"
    rxBindingVersion = "2.2.0"
    workVersion = "2.5.0"
}

// Load secrets.properties
def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')

def getCommitSha1 = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%h'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion rootProject.androidCompileSdk
    defaultConfig {
        applicationId "com.google.android.gnd"
        minSdkVersion rootProject.androidMinSdk
        targetSdkVersion rootProject.androidTargetSdk

        // TODO(https://github.com/google/ground-android/pull/985): Calculate version code manually
        versionCode gitVersioner.versionCode
        versionName gitVersioner.versionName + " " + getCommitSha1()
        testInstrumentationRunner "com.google.android.gnd.CustomTestRunner"
        multiDexEnabled true
        // For rendering vector map markers.
        vectorDrawables.useSupportLibrary = true
    }

    // Use flag -PtestBuildType with desired variant to change default behavior.
    testBuildType project.getProperties().getOrDefault("testBuildType", "debug")

    // gradle doesn't sign debug test apk (needed for running instrumentation tests on firebase)
    // https://stackoverflow.com/questions/3082780/java-lang-securityexception-permission-denial/38202106
    signingConfigs {
        staging {
            keyPassword 'ground'
            storeFile file('../cloud-builder/sign/keystore')
            storePassword 'ground'
            keyAlias 'ground'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
        }
        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
        staging {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            signingConfig signingConfigs.staging
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
    }

    // Keep the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    sourceSets {
        test.manifest.srcFile "src/test/AndroidManifest.xml"
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        animationsDisabled = true
    }
    hilt {
        enableTransformForLocalTests = true
    }

    // ErrorProne and NullAway configuration.
    // ErrorProne: https://github.com/google/error-prone.
    // ErrorProne Gradle plugin: https://github.com/tbroyer/gradle-errorprone-plugin
    // NullAway: https://github.com/uber/NullAway
    DomainObjectSet<BaseVariant> variants = getApplicationVariants()
    variants.addAll(getTestVariants())
    variants.addAll(getUnitTestVariants())
    variants.configureEach { variant ->
        variant.getJavaCompileProvider().configure {
            options.errorprone {

                // Disable all checks except NullAway.
                disableAllChecks = true
                error("NullAway")

                // Specify the packages which NullAway should analyze.
                option("NullAway:AnnotatedPackages", "com.google.android.gnd")

                // Ignore generated classes from databinding, as well as Room and Firebase classes.
                option("NullAway:UnannotatedSubPackages",
                    "com.google.android.gnd.databinding," +
                        "com.google.android.gnd.persistence.local.room," +
                        "com.google.android.gnd.persistence.remote.firestore," +
                        "com.google.android.gnd.persistence.remote.firestore.schema")

                excludedPaths = ".*/build/generated/.*"
            }
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':android-gmaps-addons')

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.1.1'

    // Android legacy support Libraries.
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    // UI widgets.
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Support for Java streams.
    implementation 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.3'

    // Google Play Services.
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    implementation "com.google.android.gms:play-services-maps:$rootProject.gmsMapsVersion"
    implementation 'com.google.android.gms:play-services-location:17.1.0'

    // GeoJSON support
    implementation "com.google.maps.android:android-maps-utils:2.2.0"

    // Firebase and related libraries.
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'com.google.firebase:firebase-firestore:23.0.1'
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.firebase:firebase-perf:20.0.1'
    implementation 'com.google.firebase:firebase-storage:20.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.0.1'
    implementation 'com.github.FrangSierra:RxFirebase:1.5.7'

    // Hilt
    implementation "com.google.dagger:hilt-android:$project.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    implementation "androidx.hilt:hilt-work:$project.hiltJetpackVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$project.hiltVersion"
    annotationProcessor "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    annotationProcessor "androidx.hilt:hilt-compiler:$project.hiltJetpackVersion"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    androidTestAnnotationProcessor "androidx.hilt:hilt-compiler:$project.hiltJetpackVersion"
    testImplementation "com.google.dagger:hilt-android-testing:$project.hiltVersion"
    testAnnotationProcessor "com.google.dagger:hilt-android-compiler:$project.hiltVersion"

    // ReactiveX
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "com.jakewharton.rxbinding2:rxbinding:$project.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$project.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$project.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$project.rxBindingVersion"
    implementation 'com.akaita.java:rxjava2-debug:1.4.0'

    // Android Arch Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$project.lifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$project.lifecycleVersion"

    // Android Navigation
    implementation "androidx.navigation:navigation-fragment:$project.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$project.navigationVersion"

    // Auto-value
    compileOnly "com.google.auto.value:auto-value-annotations:$project.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$project.autoValueVersion"

    // Guava
    implementation 'com.google.guava:guava:30.1-jre'

    // Picasso: Image downloading and caching library
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Logging
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    implementation "androidx.room:room-guava:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"

    // WorkManager
    implementation "androidx.work:work-runtime:$workVersion"
    implementation "androidx.work:work-rxjava2:$workVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"

    implementation "com.uber.autodispose:autodispose-android:$project.autoDisposeVersion"
    implementation "com.uber.autodispose:autodispose-android-archcomponents:$project.autoDisposeVersion"

    // Apache Commons IO
    implementation 'commons-io:commons-io:2.8.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'android.arch.core:core-testing:1.1.1'

    // Mockito
    testImplementation 'org.mockito:mockito-core:3.11.2'
    androidTestImplementation 'org.mockito:mockito-core:3.11.2'

    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.11.0'
    testImplementation 'com.squareup.rx.idler:rx2-idler:0.11.0'
    testImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // NullAway
    annotationProcessor "com.uber.nullaway:nullaway:0.9.1"
    errorprone "com.google.errorprone:error_prone_core:2.4.0"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

apply plugin: 'androidx.navigation.safeargs'

// This must be last to avoid dependency collisions.
// https://developers.google.com/android/guides/google-services-plugin#introduction
apply plugin: 'com.google.gms.google-services'
