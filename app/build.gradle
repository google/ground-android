/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.dagger.hilt.android'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

apply from: '../config/checkstyle/checkstyle.gradle'
apply from: '../config/lint/lint.gradle'
apply from: '../config/jacoco/jacoco.gradle'

project.ext {
    autoValueVersion = "1.10.4"
    composeUi = "1.8.2"
    hiltJetpackVersion = "1.2.0"
    lifecycleVersion = "2.8.4"
    coroutinesVersion = "1.6.4"
}

// Directory where downloaded Protocol Buffer definitions are extracted to.
def extractedGroundProtoPath = layout.buildDirectory.dir('extracted-ground-protos')

def getCommitSha1 = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%h'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdk rootProject.androidCompileSdk
    sourceSets {
        main {
            proto {
                srcDir extractedGroundProtoPath
            }
            assets {
                srcDirs 'src/main/assets'
            }
        }
        test {
            proto {
                srcDir 'src/test/proto'
            }
        }
    }
    defaultConfig {
        applicationId "org.groundplatform.android"
        minSdkVersion rootProject.androidMinSdk
        targetSdkVersion rootProject.androidTargetSdk

        // TODO: Calculate version code manually
        // Issue URL: https://github.com/google/ground-android/pull/985
        versionCode gitVersioner.versionCode
        versionName gitVersioner.versionName + " " + getCommitSha1()
        multiDexEnabled true
        // For rendering vector map markers.
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "EMULATOR_HOST", "\"10.0.2.2\""
        buildConfigField "int", "FIRESTORE_EMULATOR_PORT", "8080"
        buildConfigField "int", "AUTH_EMULATOR_PORT", "9099"
        buildConfigField "String", "SIGNUP_FORM_LINK", "\"\""
        manifestPlaceholders.usesCleartextTraffic = true

        // Room DB schema export directory
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.schemaLocation"] = "$projectDir/schemas"
            }
        }
    }

    // Use flag -PtestBuildType with desired variant to change default behavior.
    testBuildType project.getProperties().getOrDefault("testBuildType", "debug")

    // gradle doesn't sign debug test apk (needed for running instrumentation tests on firebase)
    // https://stackoverflow.com/questions/3082780/java-lang-securityexception-permission-denial/38202106
    signingConfigs {
        staging {
            keyPassword 'ground'
            storeFile file('../cloud-builder/sign/keystore')
            storePassword 'ground'
            keyAlias 'ground'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
        staging {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            signingConfig signingConfigs.staging
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
    }

    flavorDimensions "backend"
    productFlavors {
        local {
            dimension "backend"
            versionNameSuffix "-local"
            buildConfigField "boolean", "USE_EMULATORS", "true"
            manifestPlaceholders.usesCleartextTraffic = true
        }
        dev {
            dimension "backend"
            versionNameSuffix "-dev"
            buildConfigField "boolean", "USE_EMULATORS", "false"
        }
        prod {
            dimension "backend"
            buildConfigField "boolean", "USE_EMULATORS", "false"
        }
    }

    buildFeatures {
        buildConfig true
        compose true
        dataBinding true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.13"
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-Xmx4g' // '-XX:+HeapDumpOnOutOfMemoryError'
            }
        }
        animationsDisabled = true
    }
    namespace 'org.groundplatform.android'
}

configurations {
    groundProtoJar
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.androidx.recyclerview.selection
    implementation libs.androidx.junit.ktx
    implementation libs.androidx.multidex
    implementation libs.androidx.preference.ktx

    // Kotlin
    implementation libs.kotlin.stdlib
    implementation libs.kotlin.reflect
    implementation libs.jetbrains.kotlinx.serialization.json
    implementation libs.kotlinx.serialization.protobuf
    implementation libs.kotlinx.collections.immutable

    // Kotlin Coroutines
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.coroutines.core
    testImplementation libs.kotlinx.coroutines.test

    // Android legacy support Libraries.
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.appcompat

    // UI widgets.
    implementation libs.androidx.cardview
    implementation libs.material
    implementation libs.androidx.constraintlayout

    // Jetpack Compose
    implementation libs.androidx.compiler
    implementation libs.androidx.material3.android
    implementation "androidx.compose.ui:ui:$composeUi"
    implementation libs.androidx.ui.tooling.preview.android
    implementation libs.androidx.runtime.livedata
    testImplementation "androidx.compose.ui:ui-test-junit4:$composeUi"
    debugImplementation libs.androidx.ui.test.manifest
    debugImplementation "androidx.compose.ui:ui-tooling:$composeUi"
    stagingImplementation libs.androidx.ui.test.manifest

    // Image loading
    implementation libs.glide

    // Google Play Services.
    implementation libs.play.services.auth
    implementation libs.play.services.maps
    implementation libs.play.services.location

    implementation libs.android.maps.utils

    // GeoJSON support
    implementation libs.gson

    // Test Json
    testImplementation libs.json

    // Firebase and related libraries.
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.firestore
    implementation libs.firebase.functions.ktx
    implementation libs.firebase.auth
    implementation libs.firebase.perf
    implementation libs.firebase.storage
    implementation libs.firebase.crashlytics
    implementation libs.firebase.messaging
    implementation libs.firebase.messaging.directboot
    implementation libs.firebase.messaging.ktx
    implementation libs.firebase.config

    // Hilt
    implementation libs.hilt.android
    kapt "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$project.hiltVersion"
    implementation libs.androidx.hilt.navigation.fragment
    // For Robolectric tests.
    testImplementation libs.hilt.android.testing
    kaptTest "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // For instrumented tests.
    androidTestImplementation libs.hilt.android.testing
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // Hilt Android Worker API support.
    implementation libs.androidx.hilt.work
    kapt "androidx.hilt:hilt-compiler:$project.hiltJetpackVersion"

    // Android Arch Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$project.lifecycleVersion"
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.reactivestreams.ktx

    // Android Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    // Auto-value
    compileOnly libs.auto.value.annotations
    kapt "com.google.auto.value:auto-value:$project.autoValueVersion"

    implementation libs.androidx.exifinterface

    // Logging
    implementation libs.timber

    // Room
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation libs.androidx.room.testing

    // WorkManager
    implementation libs.androidx.work.runtime.ktx
    testImplementation libs.androidx.work.testing

    // OSS Licenses Plugin
    implementation libs.play.services.oss.licenses

    // Markdown Parser
    implementation libs.markdown

    // Testing
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    testImplementation libs.truth
    androidTestImplementation libs.truth
    testImplementation libs.androidx.core
    testImplementation libs.robolectric
    testImplementation libs.core.testing
    androidTestImplementation libs.core.testing
    testImplementation libs.testing
    testImplementation libs.androidx.core.testing
    testImplementation libs.kotlin.test
    testImplementation libs.androidx.navigation.testing
    testImplementation libs.turbine

    // Mockito
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.core
    testImplementation libs.mockito.android
    androidTestImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin

    // Espresso
    testImplementation libs.androidx.espresso.contrib
    testImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Fragments
    implementation libs.androidx.fragment.ktx
    debugImplementation libs.androidx.fragment.testing
    //noinspection AndroidLintFragmentGradleConfiguration
    stagingImplementation libs.androidx.fragment.testing

    // TODO: Move protos into shared module and set correct path here.
    // Issue URL: https://github.com/google/ground-android/issues/1748
    api(libs.protobuf.kotlin.lite)

    // Pulls protodefs from the specified commit in the ground-platform repo.
    groundProtoJar libs.ground.platform
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.26.1"
    }
    generateProtoTasks {
        all().each {
            it.plugins {
                // Generated Kotlin classes depend on these.
                create("java") {
                    option("lite")
                }
            }
            it.builtins {
                create("kotlin") {
                    option("lite")
                }
            }
            it.dependsOn extractGroundProtoJar
        }
    }
}

// Extracts protodefs in downloaded JAR to the build/extracted-protos dirs.
task extractGroundProtoJar(type: Copy) {
    from(
        // Defer resolution until after configuration phase.
        provider {
            configurations.groundProtoJar.collect {
                zipTree(it)
            }
        })
    into extractedGroundProtoPath
    include "**/*.proto"
}

// Allow references to generated code.
kapt {
    correctErrorTypes true
}

apply plugin: 'androidx.navigation.safeargs'

// This must be last to avoid dependency collisions.
// https://developers.google.com/android/guides/google-services-plugin#introduction
apply plugin: 'com.google.gms.google-services'

kotlin {
    jvmToolchain rootProject.jvmToolchainVersion
}

secrets {
    // Location of file containing Maps API key for this project. Should not be checked into
    // version control.
    propertiesFileName = "secrets.properties"

    // A properties file containing default secret values. This file can be
    // checked in version control.
    defaultPropertiesFileName = "local.defaults.properties"
}
