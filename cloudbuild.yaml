#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Loads the Docker image from the container registry and then runs the following steps:


# Workflow:
# --------
#
#  Copy cache --> Extract tar -->                      -------> Code quality -------> Unit tests ------------------------>
#                                \                   /                                                                     \
#                                 > Build debug apks                                                                       Save reports to GCS --> Update CI status --> Compress gradle cache --> Save gradle cache to GCS
#                                /                   \                                                                     /
#  Fetch google-services.json -->                      (master only)-----> Authorize Gcloud --> Instrumented tests ------>
#
# Notes:
# ------
# ${_PUSH_TO_MASTER} is true when the commit is pushed to master branch
# i.e. it happens after GitHub merges an approved PR with master.

steps:

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &copy_build_cache 'Copying build cache'
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        #### Calculate md5sum and save to a file.
        # 1. List all files except hidden dirs.
        # 2. Filter by filename ending with .gradle
        # 3. Convert continuous spaces into a single space
        # 4. Pick 5th column containing file size. This causes a collision if only a number is flipped (eg "v2.4" -> "v2.5"). Look for a better alternative.
        # 5. Calculate md5sum (for mac, use md5)
        # 6. Strip ending " -" if present
        ls -lR | grep -e "\.gradle$" | tr -s " " | cut -d " " -f5 | md5sum | sed 's/  -//' > hashsum

        echo "Hashsum: " $(< hashsum)
        gsutil cp "gs://${_CACHE_BUCKET}/$(< hashsum)-cache.tgz" ./ || echo "No cache found."

  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &extract_build_cache 'Extracting tar'
    waitFor:
      - *copy_build_cache
    args:
      - '-c'
      - |
        tar zxf $(< hashsum)-cache.tgz || echo "No cache found."

  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &config_google_services 'Load debug google-services.json'
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=$_GOOGLE_SERVICES_JSON --format='get(payload.data)' | tr '_-' '/+' | base64 -d > ground/google-services.json

  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &print_debug 'Print debug info'
    args:
      - '-c'
      - |
        ./gradlew --version

  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &assemble_debug 'Assemble debug apks'
    waitFor:
      - *extract_build_cache
      - *config_google_services
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex assembleDevStaging assembleDevStagingUnitTest -PtestBuildType=staging --no-daemon

  # TODO(#1547): Re-enable once instrumentation tests are fixed.
  #        if [[ "${_PUSH_TO_MASTER}" ]]; then
  #          ./gradlew -PdisablePreDex assembleDevStagingAndroidTest -PtestBuildType=staging
  #        fi

  # Run code quality checks
  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &code_quality 'Run code quality checks'
    waitFor:
      - *assemble_debug
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex checkCode --no-daemon 2> check-logs.txt || echo "fail" > build-status.txt
        cat check-logs.txt

  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &unit_tests 'Run unit tests'
    waitFor:
      - *code_quality
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex testDevStagingUnitTest --no-daemon 2> unit-test-logs.txt || echo "fail" > build-status.txt
        cat unit-test-logs.txt

        if [[ "${_PUSH_TO_MASTER}" ]]; then
          ./gradlew jacocoTestStagingUnitTestReport --no-daemon
        fi        

  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &authenticate_gcloud 'Authorize gcloud'
    waitFor:
      - *assemble_debug
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=$_SECRET_NAME --format='get(payload.data)' | tr '_-' '/+' | base64 -d > client-secret.json
        gcloud auth activate-service-account --key-file client-secret.json

  # For more details: https://cloud.google.com/sdk/gcloud/reference/alpha/firebase/test/android/run
  - name: 'gcr.io/$PROJECT_ID/android:34'
    id: &instrumented_tests 'Run instrumented tests'
    waitFor:
      - *authenticate_gcloud
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Skipping"
  # TODO(#1547): Re-enable once instrumentation tests are fixed.
  #        if [[ "${_PUSH_TO_MASTER}" ]]; then
  #          gcloud --quiet beta firebase test android run \
  #          --type instrumentation --num-uniform-shards=1 \
  #          --app ground/build/outputs/apk/staging/*.apk \
  #          --test ground/build/outputs/apk/androidTest/staging/*.apk \
  #          --device model=Pixel2,version=30,locale=en,orientation=portrait \
  #          --results-bucket ${_ARTIFACT_BUCKET} \
  #          --results-dir "$BRANCH_NAME-$BUILD_ID/reports" \
  #          --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec \
  #          --directories-to-pull /sdcard \
  #          --timeout 20m
  #        else
  #          echo "Skipping"
  #        fi

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &save_reports 'Save reports to GCS'
    waitFor:
      - *unit_tests
      - *instrumented_tests
    args: [ 'cp', '-r',
            'ground/build/reports',
            'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/reports' ]

  # Update status badge and fail build if errors were found in "build" step
  - name: 'gcr.io/cloud-builders/gsutil'
    id: &update_status 'Update build status'
    waitFor:
      - *save_reports
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Display artifact bucket link
        echo "Reports uploaded to https://console.cloud.google.com/storage/browser/${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/"

        # Update build status if running on master branch
        if [[ "${_PUSH_TO_MASTER}" ]]; then

          # Build Status
          if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
            gsutil cp cloud-builder/failure.svg gs://${_CACHE_BUCKET}/status.svg
          else
            gsutil cp cloud-builder/success.svg gs://${_CACHE_BUCKET}/status.svg
          fi

          # Make file publicly readable
          gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/status.svg
        fi

        # Delayed build fail
        if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
          cat check-logs.txt
          cat unit-test-logs.txt
          exit 1
        fi

  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &upload_code_coverage 'Upload code coverage stats'
    waitFor:
      - *update_status
    args:
      - '-c'
      - |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov --verbose upload-process --fail-on-error -t ${_CODECOV_TOKEN} -n 'service'-$BUILD_ID -F service -f coverage-service.xml

  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &compress_cache 'Compress gradle build cache'
    waitFor:
      - *update_status
    args:
      - '-c'
      - |
        if [ -f $(< hashsum)-cache.tgz ]; then
          echo "Cache already exists, skipping build cache"
        else
          echo "Building new cache"
          tar zcf cache.tgz .gradle/caches .gradle/wrapper
        fi

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &save_cache 'Save gradle cache to GCS'
    entrypoint: 'bash'
    waitFor:
      - *compress_cache
    args:
      - '-c'
      - |
        if [ -f $(< hashsum)-cache.tgz ]; then
          echo "Cache already exists, skipping save cache"
        else
          gsutil cp cache.tgz gs://${_CACHE_BUCKET}/$(< hashsum)-cache.tgz
        fi

options:
  env:
    - 'TERM=dumb'
    - 'GRADLE_USER_HOME=/workspace/.gradle'
  logging: GCS_ONLY
  machineType: 'N1_HIGHCPU_8'

timeout: 1800s
