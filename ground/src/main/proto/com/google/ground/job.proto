/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_package = "com.google.android.ground.proto";
option java_multiple_files = true;

// A single job, defined by one or more tasks, and associated with zero or more
// locations of interest (aka data collection sites) by ID.
message Job {
    // Required. The system-defined unique identifier of this entity.
    string id = 1;
    // Required. Index of the job when shown in lists.
    int32 index = 2;
    // User-facing name of the job.
    string name = 3;
    // The style used when rendering geometries and other UI elements associated
    // with this job.
    Style style = 4;
    // One or more data collection tasks to be carried out by the user in order
    // to collect and submit data.
    repeated Task tasks = 5;
}

// A style used when rendering geometries and other UI elements associated
// with this job.
message Style {
    string color = 1;
}

// A data collection task to be carried out by the user/ to collect and submit
// data.
message Task {
    // Required. The system-defined unique identifier of this entity.
    string id = 1;
    // Index of the task when shown in lists.
    int32 index = 2;
    // Question or instructions shown to the user describing the task to be
    // completed.
    string prompt = 3;
    // When true, the user may not skip this task.
    bool required = 4;

    // Defines possible values of the `level` field.
    enum DataCollectionLevel {
        // Default value when level is not specified.
        UNSPECIFIED_DATA_COLLECTION_LEVEL = 0;
        // Data collected at this level is used to define a location of
        // interest (LOI). Specifically, geometry tasks of this type may be used
        // to allow data collectors to define the LOI's geometry. Future
        // implementations may use this to allow other LOI properties to be
        // added or modified.
        LOI_METADATA = 1;
        // Data collected at this level is associated with, but does not define,
        // a location of interest (LOI). Specifically, geometry tasks of this
        // type define one or more annotations of the associated LOI. rather
        // than the geometry of the LOI itself.
        LOI_DATA = 2;
    }
    // Defines to which entity data collected in this task is associated with.
    // Defaults to LOCATION_OF_INTEREST_DATA.
    DataCollectionLevel level = 5;


    // Conditions which control whether this task is shown during data
    // collection. All conditions must be evaluate to `true` for the task to
    // be triggered.
    repeated Condition conditions = 6;

    // A task may be exactly one of the following:
    oneof task_type {
        // A question whose response is entered manually as text.
        TextQuestion text_question = 7;
        // A question whose response is entered manually as a number.
        NumberQuestion number_question = 8;
        // A question whose response is entered manually as a date and/or time.
        DateTimeQuestion date_time_question = 9;
        // A question whose response is manually selected from a list of
        // options.
        MultipleChoiceQuestion multiple_choice_question = 10;
        // A task in which the user must manually draw a geometry (point,
        // polygon, etc.) on the map.
        DrawGeometry draw_geometry = 11;
        // A task in which the user must capture their current device location.
        CaptureLocation capture_location = 12;
        // A task in which the user must take a photo.
        TakePhoto take_photo = 13;
    }

    // A question whose response is entered manually as text.
    message TextQuestion {
        // Valid values for the `type` field.
        enum Type {
            UNSPECIFIED_TEXT_QUESTION_TYPE = 0;
            // A single line of text.
            SHORT_TEXT = 1;
        }
        // The type of text question. Defaults to SHORT_TEXT.
        Type type = 1;
    }

    // A question whose response is entered manually as a number.
    message NumberQuestion {
        // Placeholder message. Fields may be added here in the future.
    }

    // A question whose response is entered manually as a data and/or time.
    message DateTimeQuestion {
        // Allowed values for the `type` field.
        enum Type {
            UNSPECIFIED_DATE_TIME_QUESTION_TYPE = 0;
            DATE_ONLY = 1;
            TIME_ONLY = 2;
            BOTH_DATE_AND_TIME = 3;
        }
        // The type of data/time question.
        Type type = 1;
    }

    // A question whose response is manually selected from a list of options.
    message MultipleChoiceQuestion {
        // Valid values for the `type` field.
        enum Type {
            UNSPECIFIED_MULTIPLE_CHOICE_QUESTION_TYPE = 0;
            // Allow only one valid to be selected.
            SELECT_ONE = 1;
            // Allow one or more values to be selected.
            SELECT_MULTIPLE = 2;
        }
        // The type of multiple choice question.
        Type type = 1;
        // The list of allowed multiple choice options.
        repeated Option options = 2;

        // When true, an additional option is presented to data collectors with
        // the label "Other (specify)" or equivalent along with a short text
        // field.
        bool has_other_option = 3;

        // A single selectable multiple choice option.
        message Option {
            // Required. The system-defined unique identifier of this entity.
            string id = 1;
            // Required. The index of the option when shown as a list.
            int32 index = 2;
            // The user-facing label of the option.
            string label = 3;
        }
    }

    // A task in which the user must manually draw a geometry (point,
    // polygon, etc.) on the map.
    message DrawGeometry {
        // Possible values for the `allowed_methods` field.
        enum Method {
            UNSPECIFIED_DRAW_GEOMETRY_METHOD = 0;
            DROP_PIN = 1;
            DRAW_AREA = 2;
        }
        // One or more methods which the user may use to complete the geometry
        // task. If multiple methods are specified, data collectors are prompted
        // which method should be used.
        repeated Method allowed_methods = 1;
    }

    // A task in which the user must capture their current device location.
    message CaptureLocation {
        // Placeholder message. Fields may be added here in the future.
    }

    // A task in which the user must take a photo.
    message TakePhoto {
        // Placeholder message. Fields may be added here in the future.
    }

    // Defines a single condition used to determine whether a task should be
    // shown.
    message Condition {
        // A condition is defined by one of the following constraints:
        oneof condition_type {
            // A condition which passes if any of the specified values are
            // selected.
            MultipleChoiceSelection multiple_choice = 1;
        }
    }

    // A condition which passed if any of the specified values are selected.
    message MultipleChoiceSelection {
        // List of multiple choice option IDs which trigger the associated task;
        // the task is shown if one or more of the related options are selected.
        repeated string option_ids = 1;
    }
}

