/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.dagger.hilt.android'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.protobuf'

apply from: '../config/checkstyle/checkstyle.gradle'
apply from: '../config/lint/lint.gradle'
apply from: '../config/jacoco/jacoco.gradle'

project.ext {
    autoValueVersion = "1.10.4"
    fragmentVersion = "1.5.7"
    hiltJetpackVersion = "1.2.0"
    lifecycleVersion = "2.7.0"
    workVersion = "2.9.0"
    mockitoVersion = "5.11.0"
    coroutinesVersion = "1.6.4"
}

// Directory where downloaded Protocol Buffer definitions are extracted to.
def extractedGroundProtoPath = layout.buildDirectory.dir('extracted-ground-protos')

// Extract API key from google-services.json for use with Google Maps SDK.
import groovy.json.JsonSlurper

def inputFile = new File("ground/src/debug/google-services.json")
def json = inputFile.exists() ? new JsonSlurper().parseText(inputFile.text) : null
def googleMapsApiKey = json ? json.client[0].api_key[0].current_key : ''

def getCommitSha1 = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%h'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdk rootProject.androidCompileSdk
    sourceSets {
        main {
            proto {
                srcDir extractedGroundProtoPath
            }
        }
        test {
            proto {
                srcDir 'src/test/proto'
            }
        }
    }
    defaultConfig {
        applicationId "com.google.android.ground"
        minSdkVersion rootProject.androidMinSdk
        targetSdkVersion rootProject.androidTargetSdk

        // TODO(https://github.com/google/ground-android/pull/985): Calculate version code manually
        versionCode gitVersioner.versionCode
        versionName gitVersioner.versionName + " " + getCommitSha1()
        testInstrumentationRunner "com.google.android.ground.CustomTestRunner"
        multiDexEnabled true
        // For rendering vector map markers.
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "EMULATOR_HOST", "\"10.0.2.2\""
        buildConfigField "int", "FIRESTORE_EMULATOR_PORT", "8080"
        buildConfigField "int", "AUTH_EMULATOR_PORT", "9099"
        buildConfigField "String", "SIGNUP_FORM_LINK", "\"\""
        manifestPlaceholders.usesCleartextTraffic = true
    }

    // Use flag -PtestBuildType with desired variant to change default behavior.
    testBuildType project.getProperties().getOrDefault("testBuildType", "debug")

    // gradle doesn't sign debug test apk (needed for running instrumentation tests on firebase)
    // https://stackoverflow.com/questions/3082780/java-lang-securityexception-permission-denial/38202106
    signingConfigs {
        staging {
            keyPassword 'ground'
            storeFile file('../cloud-builder/sign/keystore')
            storePassword 'ground'
            keyAlias 'ground'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
        }
        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
        staging {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            signingConfig signingConfigs.staging
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            FirebasePerformance {
                instrumentationEnabled false
            }
        }
    }

    flavorDimensions "backend"
    productFlavors {
        local {
            dimension "backend"
            versionNameSuffix "-local"
            buildConfigField "boolean", "USE_EMULATORS", "true"
            manifestPlaceholders.usesCleartextTraffic = true
        }
        dev {
            dimension "backend"
            versionNameSuffix "-dev"
            buildConfigField "boolean", "USE_EMULATORS", "false"
        }
        sig {
            dimension "backend"
            versionNameSuffix "-sig"
            buildConfigField "boolean", "USE_EMULATORS", "false"
        }
        ecam {
            dimension "backend"
            versionNameSuffix "-ecam"
            buildConfigField "boolean", "USE_EMULATORS", "false"
        }
    }

    buildFeatures {
        buildConfig true
        compose true
        dataBinding true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.13"
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-Xmx4g' // '-XX:+HeapDumpOnOutOfMemoryError'
            }
        }
        animationsDisabled = true
    }
    namespace 'com.google.android.ground'
}

configurations {
    groundProtoJar
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    testImplementation project(':sharedTest')
    androidTestImplementation project(':sharedTest')

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$project.kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$project.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.7"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // Android legacy support Libraries.
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // UI widgets.
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Jetpack Compose
    implementation 'androidx.compose.ui:ui:1.6.7'
    implementation 'androidx.compose.compiler:compiler:1.5.14'
    implementation 'androidx.compose.material3:material3-android:1.2.1'
    implementation 'androidx.compose.ui:ui-tooling-preview-android:1.6.7'
    // Test rules and transitive dependencies:
    testImplementation('androidx.compose.ui:ui-test-junit4:1.6.7')
    // Needed for createComposeRule(), but not for createAndroidComposeRule<YourActivity>():
    debugImplementation('androidx.compose.ui:ui-test-manifest:1.6.7')
    debugImplementation 'androidx.compose.ui:ui-tooling:1.6.7'
    stagingImplementation('androidx.compose.ui:ui-test-manifest:1.6.7')
    implementation 'androidx.compose.runtime:runtime-livedata:1.6.7'

    // Google Play Services.
    implementation 'com.google.android.gms:play-services-auth:21.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.android.gms:play-services-location:21.1.0'

    implementation "com.google.maps.android:android-maps-utils:3.8.2"

    // GeoJSON support
    implementation 'com.google.code.gson:gson:2.10.1'

    // Test Json
    testImplementation 'org.json:json:20180813'

    // Firebase and related libraries.
    implementation platform('com.google.firebase:firebase-bom:32.7.3')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-functions-ktx'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-messaging-directboot'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // Hilt
    implementation "com.google.dagger:hilt-android:$project.hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$project.hiltVersion"
    implementation "androidx.hilt:hilt-navigation-fragment:$project.hiltJetpackVersion"
    // For Robolectric tests.
    testImplementation "com.google.dagger:hilt-android-testing:$project.hiltVersion"
    // ...with Kotlin.
    kaptTest "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // ...with Java.
    testAnnotationProcessor "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // For instrumented tests.
    androidTestImplementation "com.google.dagger:hilt-android-testing:$project.hiltVersion"
    // ...with Kotlin.
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // ...with Java.
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$project.hiltVersion"
    // Hilt Android Worker API support.
    implementation "androidx.hilt:hilt-work:$project.hiltJetpackVersion"
    kapt "androidx.hilt:hilt-compiler:$project.hiltJetpackVersion"

    // Android Arch Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$project.lifecycleVersion"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$project.lifecycleVersion"

    // Android Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$project.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$project.navigationVersion"

    // Auto-value
    compileOnly "com.google.auto.value:auto-value-annotations:$project.autoValueVersion"
    kapt "com.google.auto.value:auto-value:$project.autoValueVersion"

    // Picasso: Image downloading and caching library
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Logging
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    testImplementation "androidx.work:work-testing:$workVersion"

    // OSS Licenses Plugin
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'

    // Testing
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'com.google.truth:truth:1.4.2'
    androidTestImplementation 'com.google.truth:truth:1.4.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'com.jraska.livedata:testing:1.2.0'
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$project.kotlinVersion"
    testImplementation "androidx.navigation:navigation-testing:$project.navigationVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$project.navigationVersion"
    testImplementation 'app.cash.turbine:turbine:0.12.3'

    // Mockito
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'

    // Espresso
    testImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    testImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Fragments
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    //noinspection AndroidLintFragmentGradleConfiguration
    stagingImplementation "androidx.fragment:fragment-testing:$fragmentVersion"

    implementation "com.google.guava:guava:31.1-android"

    // TODO(#1748): Move protos into shared module and set correct path here.
    api("com.google.protobuf:protobuf-kotlin-lite:4.26.1")

    // Pulls protodefs from the specified commit in the ground-platform repo.
    groundProtoJar "com.github.google:ground-platform:5211a4f@jar"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.26.1"
    }
    generateProtoTasks {
        all().each {
            it.plugins {
                // Generated Kotlin classes depend on these.
                create("java") {
                    option("lite")
                }
            }
            it.builtins {
                create("kotlin") {
                    option("lite")
                }
            }
            it.dependsOn extractGroundProtoJar
        }
    }
}

// Extracts protodefs in downloaded JAR to the build/extracted-protos dirs.
task extractGroundProtoJar(type: Copy) {
    from(
        // Defer resolution until after configuration phase.
        provider {
            configurations.groundProtoJar.collect {
                zipTree(it)
            }
        })
    into extractedGroundProtoPath
    include "**/*.proto"
}

// Allow references to generated code.
kapt {
    correctErrorTypes true
}

apply plugin: 'androidx.navigation.safeargs'

// This must be last to avoid dependency collisions.
// https://developers.google.com/android/guides/google-services-plugin#introduction
apply plugin: 'com.google.gms.google-services'

kotlin {
    jvmToolchain rootProject.jvmToolchainVersion
}
